for(j in 1:nrow(comb)){
cut = cut_len(comb[j, ], edges)
if(cut > max_cut){
max_cut = cut
cut_content = comb[j, ]
}
}
}
return(list(max_cut, cut_content))
}
random_maxcut = function(G){
vertices = V(G)
edges = as_edgelist(G)
v_set_random = c()
for(i in 1:length(vertices)){
if(sample(1:2, 1) == 1){
v_set_random = c(v_set_random, vertices[i])
}
}
return(cut_len(v_set_random, edges))
}
get_random_cut = function(G){
total = 0
num = 0
for(i in 1:100){
total = total + random_maxcut(G)
num = num + 1
}
return(total/num)
}
#create a random undirected graph which has, for each pairs of vertex, 0.5 probability to have an edge
G1 = sample_gnm(7, 7, directed = FALSE) # 7 edges graph
G2 = sample_gnm(20, 20, directed = FALSE) # 20 edges graph
# Testing real maxcut
start_time = Sys.time()
list_cut = get_real_maxcut(G1)
real_max_cut = list_cut[1]
cut_content = list_cut[2]
end_time = Sys.time()
end_time - start_time
start_time = Sys.time()
list_cut = get_real_maxcut(G2)
real_max_cut = list_cut[1]
cut_content = list_cut[2]
end_time = Sys.time()
end_time - start_time
#Testing approx maxcut
start_time = Sys.time()
approx_max_cut = get_approx_maxcut(G1)
end_time = Sys.time()
end_time - start_time
start_time = Sys.time()
approx_max_cut = get_approx_maxcut(G2)
end_time = Sys.time()
end_time - start_time
#Testing
start_time = Sys.time()
real_max_cut = get_random_cut(G1)
end_time = Sys.time()
end_time - start_time
start_time = Sys.time()
real_max_cut = get_random_cut(G2)
end_time = Sys.time()
end_time - start_time
#create a matrix: rows = graphs, cols = implementations
graph_list = c()
mat = matrix(nrow = 14, ncol = 4)
for(i in 4:17){
G = sample_gnm(i, i, directed = FALSE)
approx_max_cut = get_approx_maxcut(G)
random_cut = get_random_cut(G)
real_max_cut_list = get_real_maxcut(G)
real_max_cut = real_max_cut_list[[1]]
if((i %% 4) == 0){
cut_content = real_max_cut_list[[2]]
graph_list = append(graph_list, list(G, cut_content))
}
mat[i-3, 1] = i
mat[i-3, 2] = round(approx_max_cut, digits = 2)
mat[i-3, 3] = real_max_cut
mat[i-3, 4] = random_cut
}
#convert the matrix to a table
df = as.data.frame(mat)
colnames(df) <- c("vertices", "approximate max cut","real max cut","randomized max cut")
df
for (i in seq(1, length(graph_list), by=2)) {
graph = graph_list[[i]]
cut = graph_list[[i+1]]
for(j in 1:length(V(graph))){
if(V(graph)[j] %in% cut){
V(graph)[j]$color = "red"
}else{
V(graph)[j]$color = "blue"
}
}
print(ggraph(graph, layout = "kk") +
geom_edge_link(edge_colour = "grey") +
geom_node_point(colour = V(graph)$color))
}
add_links = function(edges, n){
for(i in 5:n){
#G = add_vertices(G, nv=1, attr=list(name = i))
if(sample(1:2, 1) == 1){
v_random = sample(1:(i-1), 1)
#G = add_edges(G, c(i, v_random))
edges[i, 1] = i
edges[i, 2] = v_random
}else{
row_random = sample(1:(i-1), 1)
e_random = edges[row_random, 2]
#G = add_edges(G, c(i, e_random))
edges[i, 1] = i
edges[i, 2] = e_random
}
}
G = graph_from_edgelist(edges, directed = TRUE)
#G = graph_from_adj_list(edges, mode = c("out"))
return(G)
}
g_list = vector("list", 10)
n = 1000000
edges = matrix(nrow = n, ncol = 2)
edges[1:4, 1:2] <- c(1,2,3,4,2,3,4,1)
for(i in 1:1){
G = add_links(edges, n)
g_list[[i]] = G
}
print(G)
d = degree(G, v = V(G), mode = c("all"))
dd = degree_distribution(G, cumulative = FALSE)
dd = dd[-1]#*n
idx = which(dd != 0)
dd = dd[idx]
#plot(log(idx), log(dd), type="l")
plot(idx, dd, log = "xy", type="l")
exp_law = function(k){
res = k^(-2.006906)
return(res)
}
n = 1000
x = c(1:n)
y = integer(n)
for(i in 1:n){
y[i] = exp_law(i)
}
degree = degree(G, v = V(G), mode = c("all"))
dd = degree_distribution(G, cumulative = TRUE)
dd = dd[-1]#*n
idx = 1:length(dd)
#plot(log(idx), log(dd))
plot(idx, dd, log = "xy", type="l", col = "red")
lines(x, y, col = "blue")
#non riesce a plottarlo1
#ggraph(G, layout = "sparse_stress", pivots = 50, weights = NA) +
#  geom_edge_link(edge_colour = "grey") +
#  geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
#  theme_graph()
poisson = function(p, nodes_number, k){
mu = p*(nodes_number-1)
res = (exp(-mu)/sqrt(2*pi*k))*(((exp(1)*mu)/k)^k)
return(res)
}
n = 50
p = 0.21
x = c(1:n)
y = integer(n)
for(i in 1:n){
y[i] = poisson(p, n, i)
}
sum(y)
plot(x, y, log = "", type="l", xlim = c(1,50))
fit1 = fit_power_law(dd)
fit1
library(igraph)
library(ggraph)
library(sdpt3r)
library(reshape2)
library(MASS)
#get an approximation of max cut using the function maxcut()
get_approx_maxcut = function(G){
G_mat_adj = as_adjacency_matrix(G)
G_mat = as.matrix(G_mat_adj)
return(-maxcut(G_mat)$pobj)
}
#get an approximation of max cut using the function maxcut()
get_approx_maxcut = function(G){
G_mat_adj = as_adjacency_matrix(G)
G_mat = as.matrix(G_mat_adj)
return(-maxcut(G_mat)$pobj)
}
#given a set of vertices and the edges of the graph, returns the cardinality of the cut set
cut_len = function(v_set, edges){
count = 0
for(i in 1:nrow(edges)){
if(edges[i, 1] %in% v_set){
if(!(edges[i, 2] %in% v_set)){
count = count + 1
}
}else{
if((edges[i, 2] %in% v_set)){
count = count + 1
}
}
}
return(count)
}
#given a graph return the real maxcut
get_real_maxcut = function(G){
edges = as_edgelist(G)
vertices = V(G)
max_cut = 0
cut_content = c()
for(i in 1:length(vertices)){
comb = t(combn(vertices, i))
for(j in 1:nrow(comb)){
cut = cut_len(comb[j, ], edges)
if(cut > max_cut){
max_cut = cut
cut_content = comb[j, ]
}
}
}
return(list(max_cut, cut_content))
}
#given a set of vertices and the edges of the graph, returns the cardinality of the cut set
cut_len = function(v_set, edges){
count = 0
for(i in 1:nrow(edges)){
if(edges[i, 1] %in% v_set){
if(!(edges[i, 2] %in% v_set)){
count = count + 1
}
}else{
if((edges[i, 2] %in% v_set)){
count = count + 1
}
}
}
return(count)
}
#given a graph return the real maxcut
get_real_maxcut = function(G){
edges = as_edgelist(G)
vertices = V(G)
max_cut = 0
cut_content = c()
for(i in 1:length(vertices)){
comb = t(combn(vertices, i))
for(j in 1:nrow(comb)){
cut = cut_len(comb[j, ], edges)
if(cut > max_cut){
max_cut = cut
cut_content = comb[j, ]
}
}
}
return(list(max_cut, cut_content))
}
random_maxcut = function(G){
vertices = V(G)
edges = as_edgelist(G)
v_set_random = c()
for(i in 1:length(vertices)){
if(sample(1:2, 1) == 1){
v_set_random = c(v_set_random, vertices[i])
}
}
return(cut_len(v_set_random, edges))
}
get_random_cut = function(G){
total = 0
num = 0
for(i in 1:100){
total = total + random_maxcut(G)
num = num + 1
}
return(total/num)
}
#create a random undirected graph which has, for each pairs of vertex, 0.5 probability to have an edge
G1 = sample_gnm(7, 7, directed = FALSE) # 7 edges graph
G2 = sample_gnm(20, 20, directed = FALSE) # 20 edges graph
# Testing real maxcut
start_time = Sys.time()
list_cut = get_real_maxcut(G1)
real_max_cut = list_cut[1]
cut_content = list_cut[2]
end_time = Sys.time()
end_time - start_time
start_time = Sys.time()
list_cut = get_real_maxcut(G2)
real_max_cut = list_cut[1]
cut_content = list_cut[2]
end_time = Sys.time()
end_time - start_time
#Testing approx maxcut
start_time = Sys.time()
approx_max_cut = get_approx_maxcut(G1)
end_time = Sys.time()
end_time - start_time
start_time = Sys.time()
approx_max_cut = get_approx_maxcut(G2)
end_time = Sys.time()
end_time - start_time
#Testing randomized maxcut
start_time = Sys.time()
real_max_cut = get_random_cut(G1)
end_time = Sys.time()
end_time - start_time
start_time = Sys.time()
real_max_cut = get_random_cut(G2)
end_time = Sys.time()
end_time - start_time
#create a matrix: rows = graphs, cols = implementations
graph_list = c()
mat = matrix(nrow = 14, ncol = 4)
for(i in 4:17){
G = sample_gnm(i, i, directed = FALSE)
approx_max_cut = get_approx_maxcut(G)
random_cut = get_random_cut(G)
real_max_cut_list = get_real_maxcut(G)
real_max_cut = real_max_cut_list[[1]]
if((i %% 4) == 0){
cut_content = real_max_cut_list[[2]]
graph_list = append(graph_list, list(G, cut_content))
}
mat[i-3, 1] = i
mat[i-3, 2] = round(approx_max_cut, digits = 2)
mat[i-3, 3] = real_max_cut
mat[i-3, 4] = random_cut
}
#convert the matrix to a table
df = as.data.frame(mat)
colnames(df) <- c("vertices", "approximate max cut","real max cut","randomized max cut")
df
#convert the matrix to a table
df = as.data.frame(mat)
colnames(df) <- c("vertices", "approximate max cut","real max cut","randomized max cut")
df
for (i in seq(1, length(graph_list), by=2)) {
graph = graph_list[[i]]
cut = graph_list[[i+1]]
for(j in 1:length(V(graph))){
if(V(graph)[j] %in% cut){
V(graph)[j]$color = "red"
}else{
V(graph)[j]$color = "blue"
}
}
print(ggraph(graph, layout = "kk") +
geom_edge_link(edge_colour = "grey") +
geom_node_point(colour = V(graph)$color))
}
add_links = function(edges, n){
for(i in 5:n){
if(sample(1:2, 1) == 1){
v_random = sample(1:(i-1), 1)
edges[i, 1] = i
edges[i, 2] = v_random
}else{
row_random = sample(1:(i-1), 1)
e_random = edges[row_random, 2]
edges[i, 1] = i
edges[i, 2] = e_random
}
}
G = graph_from_edgelist(edges, directed = TRUE)
return(G)
}
g_list = vector("list", 5)
n = 1000000
edges = matrix(nrow = n, ncol = 2)
edges[1:4, 1:2] <- c(1,2,3,4,2,3,4,1)
for(i in 1:5){
G = add_links(edges, n)
g_list[[i]] = G
}
for(i in 1:length(g_list)){
G = g_list[[i]]
degree = degree(G, v = V(G), mode = c("all"))
dd = degree_distribution(G, cumulative = FALSE)
dd = dd[-1]#*n
idx = which(dd != 0)
dd = dd[idx]
fit1 = fit_power_law(degree)
alpha = fit1$alpha
m = length(idx)
x = c(1:m)
plot(idx, dd, log = "xy", type="l", col = "red", xlab = "degree", ylab = "% vertices")
lines(x, x^(-fit1$alpha), col = "blue")
fit2 = fitdistr(degree, "Poisson")
m = 1000000
x = c(1:m)
lines(x, dpois(x,lambda=fit2$estimate), col = "green")
legend(150, 1, legend = c("degree distribution", "power law", "poisson"),
col = c("red", "blue", "green"), fill = c("red", "blue", "green"))
}
for(i in 1:length(g_list)){
G = g_list[[i]]
degree = degree(G, v = V(G), mode = c("all"))
dd = degree_distribution(G, cumulative = TRUE)
dd = dd[-1]#*n
idx = 1:length(dd)
plot(idx, dd, log = "xy", type="l", xlab = "degree", ylab = "% vertices")
}
n = 1000
edges = matrix(nrow = n, ncol = 2)
edges[1:4, 1:2] <- c(1,2,3,4,2,3,4,1)
G = add_links(edges, n)
ggraph(G, layout = "sparse_stress", pivots = 50, weights = NA) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
ggraph(G) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
ggraph(G, layout = "sparse_stress") +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
ggraph(G, layout = "sparse_stress", weights = NA) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
ggraph(G, layout = "kk", weights = NA) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
ggraph(G, weights = NA) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
n = 100
edges = matrix(nrow = n, ncol = 2)
edges[1:4, 1:2] <- c(1,2,3,4,2,3,4,1)
G = add_links(edges, n)
ggraph(G, weights = NA) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
ggraph(G, weights = NA) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")
ggraph(G) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")
n = 10
edges = matrix(nrow = n, ncol = 2)
edges[1:4, 1:2] <- c(1,2,3,4,2,3,4,1)
G = add_links(edges, n)
ggraph(G) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")
n = 1000
edges = matrix(nrow = n, ncol = 2)
edges[1:4, 1:2] <- c(1,2,3,4,2,3,4,1)
G = add_links(edges, n)
ggraph(G) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")
n = 1000
edges = matrix(nrow = n, ncol = 2)
edges[1:4, 1:2] <- c(1,2,3,4,2,3,4,1)
G = add_links(edges, n)
degree = degree(G, v = V(G), mode = c("all"))
ggraph(G) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")
n = 1000
edges = matrix(nrow = n, ncol = 2)
edges[1:4, 1:2] <- c(1,2,3,4,2,3,4,1)
G = add_links(edges, n)
degree = degree(G, v = V(G), mode = c("all"))
ggraph(G, layout = "sparse_stress", pivots = 50, weights = NA) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
ggraph(G, layout = "sparse_stress") +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
n = 10000
edges = matrix(nrow = n, ncol = 2)
edges[1:4, 1:2] <- c(1,2,3,4,2,3,4,1)
G = add_links(edges, n)
degree = degree(G, v = V(G), mode = c("all"))
ggraph(G, layout = "sparse_stress", pivots = 50, weights = NA) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
ggraph(G, pivots = 50, weights = NA) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
ggraph(G, layout = "kk", pivots = 50, weights = NA) +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
ggraph(G, layout = "kk") +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
n = 1000000
edges = matrix(nrow = n, ncol = 2)
edges[1:4, 1:2] <- c(1,2,3,4,2,3,4,1)
G = add_links(edges, n)
degree = degree(G, v = V(G), mode = c("all"))
ggraph(G, layout = "kk") +
geom_edge_link(edge_colour = "grey") +
geom_node_point(aes(size = degree, alpha = degree), colour = "black")+
theme_graph()
